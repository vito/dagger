extend type Query {
  """
  Create a new function from the provided definition.
  """
  newFunction(def: FunctionDef!): Function!

  """
  The FunctionCall context that the SDK caller is currently executing in.
  If the caller is not currently executing in a function, this will return
  an error.
  """
  currentFunctionCall: FunctionCall!
}

type FunctionCall {
  "The name of the function being called."
  name: String!

  """
  The name of the parent object of the function being called.
  If the function is "top-level" to the module, this is the name of the module.
  """
  parentName: String!

  """
  The value of the parent object of the function being called.
  If the function is "top-level" to the module, this is always an empty object.
  """
  parent: JSON!

  """
  The argument values the function is being invoked with.
  """
  inputArgs: [FunctionCallArgValue!]

  """
  Set the return value of the function call to the provided value.
  The value should be a string of the JSON serialization of the return value.
  """
  returnValue(value: JSON!): Void
}

type FunctionCallArgValue {
  "The name of the argument."
  name: String!

  "The value of the argument represented as a string of the JSON serialization."
  value: JSON!
}

input FunctionDef {
  "The name of the function"
  name: String!

  "A doc string for the function, if any"
  description: String

  "Arguments accepted by this function, if any"
  args: [FunctionArgDef!]

  "The type returned by this function"
  returnType: TypeDefInput!
}

input FunctionArgDef {
  "The name of the argument"
  name: String

  "A doc string for the argument, if any"
  description: String

  "The type of the argument"
  typeDef: TypeDef!

  "A default value to use for this argument if not explicitly set by the caller, if any"
  defaultValue: JSON
}

"""
A definition of a type used in a Module as an argument, return type or object field.
"""
input TypeDefInput {
  "The kind of type this is (e.g. primitive, list, object)"
  kind: TypeDefKind

  "Whether this type can be set to null"
  optional: Boolean

  """
  If kind is LIST, the list-specific type definition.
  If kind is not LIST, this will be null."
  """
  asList: ListTypeDefInput

  """
  If kind is OBJECT, the object-specific type definition.
  If kind is not OBJECT, this will be null."
  """
  asObject: ObjectTypeDefInput
}

"""
A definition of a custom object defined in a Module.
"""
input ObjectTypeDefInput {
  "The name of the object"
  name: String!

  "The doc string for the object, if any"
  description: String

  "Static fields defined on this object, if any"
  fields: [FieldTypeDefInput!]

  "Functions defined on this object, if any"
  functions: [FunctionDef!]
}

"""
A definition of a field on a custom object defined in a Module.
A field on an object has a static value, as opposed to a function on an
object whose value is computed by invoking code (and can accept arguments).
"""
input FieldTypeDefInput {
  "The name of the field in the object"
  name: String!

  "A doc string for the field, if any"
  description: String

  "The type of the field"
  typeDef: TypeDefInput!
}

input ListTypeDefInput {
  "The type of the elements in the list"
  elementType: TypeDefInput!
}
