# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.Changes do
  @moduledoc """
  A comparison between two directories representing changes that can be applied.
  """

  use Dagger.Core.Base, kind: :object, name: "Changes"

  alias Dagger.Core.Client
  alias Dagger.Core.QueryBuilder, as: QB

  @derive Dagger.ID

  defstruct [:query_builder, :client]

  @type t() :: %__MODULE__{}

  @doc """
  Files and directories that were added in the newer directory.
  """
  @spec added_paths(t()) :: {:ok, [String.t()]} | {:error, term()}
  def added_paths(%__MODULE__{} = changes) do
    query_builder =
      changes.query_builder |> QB.select("addedPaths")

    Client.execute(changes.client, query_builder)
  end

  @doc """
  The newer/upper snapshot.
  """
  @spec after_(t()) :: Dagger.Directory.t()
  def after_(%__MODULE__{} = changes) do
    query_builder =
      changes.query_builder |> QB.select("after")

    %Dagger.Directory{
      query_builder: query_builder,
      client: changes.client
    }
  end

  @doc """
  The older/lower snapshot to compare against.
  """
  @spec before(t()) :: Dagger.Directory.t()
  def before(%__MODULE__{} = changes) do
    query_builder =
      changes.query_builder |> QB.select("before")

    %Dagger.Directory{
      query_builder: query_builder,
      client: changes.client
    }
  end

  @doc """
  Files and directories that existed before and were updated in the newer directory.
  """
  @spec changed_paths(t()) :: {:ok, [String.t()]} | {:error, term()}
  def changed_paths(%__MODULE__{} = changes) do
    query_builder =
      changes.query_builder |> QB.select("changedPaths")

    Client.execute(changes.client, query_builder)
  end

  @doc """
  A unique identifier for this Changes.
  """
  @spec id(t()) :: {:ok, Dagger.ChangesID.t()} | {:error, term()}
  def id(%__MODULE__{} = changes) do
    query_builder =
      changes.query_builder |> QB.select("id")

    Client.execute(changes.client, query_builder)
  end

  @doc """
  Files and directories that were removed. Directories are indicated by a trailing slash, and their child paths are not included.
  """
  @spec removed_paths(t()) :: {:ok, [String.t()]} | {:error, term()}
  def removed_paths(%__MODULE__{} = changes) do
    query_builder =
      changes.query_builder |> QB.select("removedPaths")

    Client.execute(changes.client, query_builder)
  end
end

defimpl Jason.Encoder, for: Dagger.Changes do
  def encode(changes, opts) do
    {:ok, id} = Dagger.Changes.id(changes)
    Jason.Encode.string(id, opts)
  end
end

defimpl Nestru.Decoder, for: Dagger.Changes do
  def decode_fields_hint(_struct, _context, id) do
    {:ok, Dagger.Client.load_changes_from_id(Dagger.Global.dag(), id)}
  end
end
